#pragma once

const char * vertex_source =
"// Vertex shader\n"
"#version 330 core\n"
"layout(location = 0) in vec3 aPos;\n"
"layout(location = 1) in vec3 aNormal;\n"
"layout(location = 2) in vec3 aColor;\n"
"layout(location = 3) in float aAOFactor;\n"
"\n"
"const int NUM_CASCADES = 3;\n"
"\n"
"out vec3 vertexColor;\n"
"out vec3 normal;\n"
"out vec3 fragPos;\n"
"out float aoFactor;\n"
"out float mist;\n"
"out vec4 fragPosSunSpace[NUM_CASCADES];\n"
"out float clipSpacePosZ;\n"
"\n"
"uniform float cullingDistance;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 projection;\n"
"uniform mat4 sunSpaceMatrix[NUM_CASCADES];\n"
"\n"
"const float e = 2.71828;\n"
"\n"
"void main() {\n"
"  vec4 modelPos = model * vec4(aPos, 1.0f);\n"
"  vec4 viewPos = view * modelPos;\n"
"\n"
"  gl_Position = projection * viewPos;\n"
"\n"
"  float grayness = 1 - min(1.0f, max(0.000001f, (cullingDistance + viewPos.z) /\n"
"                                                    cullingDistance));\n"
"  float exp_grayness = pow(e, (1 - 1 / (grayness * grayness)));\n"
"  mist = exp_grayness;\n"
"\n"
"  clipSpacePosZ = -viewPos.z;\n"
"  vertexColor = aColor;\n"
"  fragPos = vec3(modelPos);\n"
"  for (int i = 0; i < NUM_CASCADES; i++) {\n"
"    fragPosSunSpace[i] = sunSpaceMatrix[i] * modelPos;\n"
"  }\n"
"  normal = normalize((mat3(model) * aNormal));\n"
"  aoFactor = aAOFactor;\n"
"}\n"
;
